// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux.hdl

/*
Implementation notes:

Again, breaking the problem down made this easier.
Instead of trying to find logic that would unify a and b paths, I instead split the problem:

For a:
in sel out
 0  0  0
 0  1  0
 1  0  1
 1  1  0

Which is clearly the second half of the equation from Mux (!(!in or sel)), so that's done.

 For b:
 in sel out
  0  0  0
  0  1  0
  1  0  0
  1  1  1

Which is obviously an AND.
*/

/**
 * Demultiplexor:
 * {a, b} = {in, 0} if sel == 0
 *          {0, in} if sel == 1
 */

CHIP DMux {
    IN in, sel;
    OUT a, b;

    PARTS:
    And(a=sel, b=in, out=b);

    Not(in=in, out=notIn);
    Or(a=notIn, b=sel, out=temp);
    Not(in=temp, out=a);
}
